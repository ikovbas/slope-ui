{"version":3,"file":"typeahead.min.js","sources":["typeahead/typeahead.js"],"names":["angular","module","provider","defaults","this","animation","prefixClass","prefixEvent","placement","template","trigger","container","keyboard","html","delay","minLength","filter","limit","$get","$window","$rootScope","$tooltip","$parse","TypeaheadFactory","element","controller","config","$typeahead","options","extend","parentScope","scope","$scope","$selectedValue","$resetMatches","$matches","$activeIndex","$activate","index","$$postDigest","activate","$select","select","$isVisible","update","matches","length","value","$setViewValue","$render","$digest","$emit","onSelect","onSelectFn","isMinLength","isString","$viewValue","parseInt","$getIndex","l","i","$onMouseDown","evt","preventDefault","stopPropagation","$onKeyDown","test","keyCode","isUndefined","show","setTimeout","$element","on","hide","off","document","body","directive","$q","$parseOptions","restrict","require","link","attr","forEach","key","isDefined","ngOptions","parsedOptions","typeahead","watchOptions","watchedOptions","$match","replace","trim","$watch","valuesFn","then","values","ngModel","newValue","$modelValue","selectMode","substring","slice","isVisible","$isEmpty","val","selected","inputLabel","getViewValue","isNumber","label","isObject","$on","destroy"],"mappings":"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","sourcesContent":["'use strict';\n\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$typeahead', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'typeahead',\n      prefixEvent: '$typeahead',\n      placement: 'bottom-left',\n      template: 'typeahead/typeahead.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      minLength: 1,\n      filter: 'filter',\n      limit: 6\n    };\n\n    this.$get = function($window, $rootScope, $tooltip, $parse) {\n\n      var bodyEl = angular.element($window.document.body);\n\n      function TypeaheadFactory(element, controller, config) {\n\n        var $typeahead = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $typeahead = $tooltip(element, options);\n        var parentScope = config.scope;\n        var scope = $typeahead.$scope;\n\n        scope.$selectedValue = null;\n        scope.$resetMatches = function(){\n          scope.$matches = [];\n          scope.$activeIndex = 0;\n        };\n        scope.$resetMatches();\n\n        scope.$activate = function(index) {\n          scope.$$postDigest(function() {\n            $typeahead.activate(index);\n          });\n        };\n\n        scope.$select = function(index, evt) {\n          scope.$$postDigest(function() {\n            $typeahead.select(index);\n          });\n        };\n\n        scope.$isVisible = function() {\n          return $typeahead.$isVisible();\n        };\n\n        // Public methods\n\n        $typeahead.update = function(matches) {\n          scope.$matches = matches;\n          if(scope.$activeIndex >= matches.length) {\n            scope.$activeIndex = 0;\n          }\n        };\n\n        $typeahead.activate = function(index) {\n          scope.$activeIndex = index;\n        };\n\n        $typeahead.select = function(index) {\n          scope.$selectedValue = scope.$matches[index].value;\n          controller.$setViewValue(scope.$selectedValue);\n          controller.$render();\n          scope.$resetMatches();\n          if(parentScope) parentScope.$digest();\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', scope.$selectedValue, index);\n          if(options.onSelect) {\n            var onSelectFn = $parse(options.onSelect);\n            if(typeof onSelectFn === 'function') onSelectFn(scope);\n          }\n        };\n\n        // Protected methods\n\n        $typeahead.$isVisible = function() {\n          if(!options.minLength || !controller) {\n            return !!scope.$matches.length;\n          }\n          // minLength support\n          var isMinLength = (angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength);\n          return scope.$matches.length && (isMinLength || parseInt(options.minLength) === 0);\n        };\n\n        $typeahead.$getIndex = function(value) {\n          var l = scope.$matches.length, i = l;\n          if(!l) return;\n          for(i = l; i--;) {\n            if(scope.$matches[i].value === value) break;\n          }\n          if(i < 0) return;\n          return i;\n        };\n\n        $typeahead.$onMouseDown = function(evt) {\n          // Prevent blur on mousedown\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        $typeahead.$onKeyDown = function(evt) {\n          if (!/(^38$|^40$|^13$|^9$)/.test(evt.keyCode)) return;\n\n          // Let ngSubmit pass if the typeahead tip is hidden\n          if($typeahead.$isVisible()) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // Select with enter\n          if (evt.keyCode === 13 || evt.keyCode === 9) {\n            scope.$matches.length && $typeahead.select(scope.$activeIndex);\n          }\n\n          // Navigate with keyboard\n          else {\n            if(evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n            else if(evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n            else if(angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n          }\n          evt.keyCode !== 9 && evt.preventDefault();\n          evt.keyCode !== 9 && evt.stopPropagation();\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var show = $typeahead.show;\n        $typeahead.show = function() {\n          show();\n          setTimeout(function() {\n            $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n            if(options.keyboard) {\n              element.on('keydown', $typeahead.$onKeyDown);\n            }\n          });\n        };\n\n        var hide = $typeahead.hide;\n        $typeahead.hide = function() {\n          $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\n          if(options.keyboard) {\n            element.off('keydown', $typeahead.$onKeyDown);\n          }\n          hide();\n        };\n\n        return $typeahead;\n\n      }\n\n      TypeaheadFactory.defaults = defaults;\n      return TypeaheadFactory;\n\n    };\n\n  })\n\n  .directive('bsTypeahead', function($window, $parse, $q, $typeahead, $parseOptions) {\n\n    var defaults = $typeahead.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'template', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'onSelect', 'inputLabel'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Build proper ngOptions\n        var filter = options.filter || defaults.filter;\n        var limit = options.limit || defaults.limit;\n        var ngOptions = attr.ngOptions;\n        if(filter) ngOptions += ' | ' + filter + ':$viewValue';\n        if(limit) ngOptions += ' | limitTo:' + limit;\n        var parsedOptions = $parseOptions(ngOptions);\n\n        // Initialize typeahead\n        var typeahead = $typeahead(element, controller, options);\n\n        // Watch options on demand\n        if(options.watchOptions) {\n          // Watch ngOptions values before filtering for changes, drop function calls\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n          scope.$watch(watchedOptions, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\n              typeahead.update(values);\n              controller.$render();\n            });\n          }, true);\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\n          // console.warn('$watch', element.attr('ng-model'), newValue);\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n          parsedOptions.valuesFn(scope, controller)\n          .then(function(values) {\n            // Prevent input with no future prospect if selectMode is truthy\n            // @TODO test selectMode\n            if(options.selectMode && !values.length && newValue.length > 0) {\n              controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n              return;\n            }\n            if(values.length > limit) values = values.slice(0, limit);\n            var isVisible = typeahead.$isVisible();\n            isVisible && typeahead.update(values);\n            // Do not re-queue an update if a correct value has been selected\n            if (newValue === typeahead.$scope.$selectedValue) return;\n            !isVisible && typeahead.update(values);\n            // Queue a new rendering that will leverage collection loading\n            controller.$render();\n          });\n        });\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          if(controller.$isEmpty(controller.$viewValue)) return element.val('');\n          var index = typeahead.$getIndex(controller.$modelValue);\n          var selected = '';\n          if(options.inputLabel) {\n            var getViewValue = $parse(options.inputLabel);\n            selected = getViewValue(scope);\n          }\n          else {\n            /* Get the label from the ng-options parser if it exists, otherwise use the viewValue (label property if viewValue is object) */\n            selected = angular.isNumber(index) ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n            if (angular.isObject(selected)) selected = selected.label;\n          }\n          if (!angular.isString(selected)) return;\n          controller.$viewValue = selected.replace(/<(?:.|\\n)*?>/gm, '').trim();\n          element.val(controller.$viewValue);\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          typeahead.destroy();\n          options = null;\n          typeahead = null;\n        });\n\n      }\n    };\n\n  });\n"],"sourceRoot":"/source/"}